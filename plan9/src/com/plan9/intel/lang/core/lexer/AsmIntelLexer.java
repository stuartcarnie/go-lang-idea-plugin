/* The following code was generated by JFlex 1.4.3 on 12/23/15 9:58 AM */

package com.plan9.intel.lang.core.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.plan9.intel.lang.core.psi.AsmIntelTypes;
import com.intellij.psi.TokenType;
import static com.plan9.intel.lang.core.AsmIntelParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/23/15 9:58 AM from the specification file
 * <tt>/Users/stuartcarnie/projects/jetbrains/go-lang-idea-plugin/plan9/src/com/plan9/intel/lang/core/lexer/AsmIntelLexer.flex</tt>
 */
class AsmIntelLexer implements FlexLexer, AsmIntelTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\2\1\1\22\0\1\3\1\0\1\5"+
    "\1\55\4\0\1\64\1\65\2\0\1\66\2\0\1\4\1\12\1\50"+
    "\1\47\1\54\1\53\1\11\1\52\1\11\1\51\1\11\1\15\6\0"+
    "\1\23\1\22\1\20\1\24\1\37\1\16\1\45\1\43\1\40\1\30"+
    "\1\46\1\26\1\25\1\31\1\33\1\17\1\41\1\32\1\21\1\35"+
    "\1\34\1\42\1\27\1\14\1\36\1\44\4\0\1\6\1\0\6\10"+
    "\2\6\1\56\3\6\1\57\1\6\1\61\1\60\1\6\1\62\1\6"+
    "\1\63\3\6\1\13\2\6\1\0\1\67\55\0\1\6\12\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\201\0\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\10\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\110\0\33\6\5\0\3\6\55\0\53\6\25\0\12\7"+
    "\4\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6\7\0\2\6"+
    "\12\7\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0\131\6"+
    "\13\0\1\6\16\0\12\7\41\6\11\0\2\6\4\0\1\6\5\0"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\27\0\31\6\107\0"+
    "\1\6\1\0\13\6\127\0\66\6\3\0\1\6\22\0\1\6\7\0"+
    "\12\6\4\0\12\7\1\0\7\6\1\0\7\6\5\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0"+
    "\1\6\20\0\1\6\15\0\2\6\1\0\3\6\4\0\12\7\2\6"+
    "\23\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\37\0\4\6\1\0\1\6\7\0\12\7"+
    "\2\0\3\6\20\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\3\0\1\6\22\0\1\6\17\0\2\6"+
    "\4\0\12\7\25\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6"+
    "\4\0\12\7\1\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\26\0\1\6\25\0\12\7\25\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\32\0\2\6\6\0\2\6\4\0\12\7\25\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\40\0\1\6"+
    "\1\0\2\6\4\0\12\7\1\0\2\6\22\0\10\6\1\0\3\6"+
    "\1\0\51\6\2\0\1\6\20\0\1\6\21\0\2\6\4\0\12\7"+
    "\12\0\6\6\5\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\72\0\60\6\1\0\2\6\14\0\7\6\11\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6"+
    "\1\0\1\6\11\0\12\7\2\0\4\6\40\0\1\6\37\0\12\7"+
    "\26\0\10\6\1\0\44\6\33\0\5\6\163\0\53\6\24\0\1\6"+
    "\12\7\6\0\6\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0"+
    "\3\6\4\0\15\6\14\0\1\6\1\0\12\7\6\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\45\0\20\6\20\0"+
    "\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\25\0"+
    "\15\6\1\0\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0"+
    "\3\6\17\0\64\6\43\0\1\6\4\0\1\6\3\0\12\7\46\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\0\1\6\5\0\106\6\12\0"+
    "\35\6\51\0\12\7\36\6\2\0\5\6\13\0\54\6\25\0\7\6"+
    "\10\0\12\7\46\0\27\6\11\0\65\6\53\0\12\7\6\0\12\7"+
    "\15\0\1\6\135\0\57\6\21\0\7\6\4\0\12\7\51\0\36\6"+
    "\15\0\2\6\12\7\54\6\32\0\44\6\34\0\12\7\3\0\3\6"+
    "\12\7\44\6\153\0\4\6\1\0\4\6\3\0\2\6\11\0\300\6"+
    "\100\0\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\164\0\1\6"+
    "\15\0\1\6\20\0\15\6\145\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\64\0\2\6\u0a7b\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\0\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\20\0\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\120\0\1\6\u01d5\0\2\6\52\0\5\6\5\0\2\6\4\0\126\6"+
    "\6\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
    "\20\0\31\6\10\0\106\6\61\0\11\6\2\0\147\6\2\0\4\6"+
    "\1\0\4\6\14\0\13\6\115\0\12\6\1\0\3\6\1\0\4\6"+
    "\1\0\27\6\35\0\64\6\16\0\62\6\34\0\12\7\30\0\6\6"+
    "\3\0\1\6\4\0\12\7\34\6\12\0\27\6\31\0\35\6\7\0"+
    "\57\6\34\0\1\6\12\7\46\0\51\6\27\0\3\6\1\0\10\6"+
    "\4\0\12\7\6\0\27\6\3\0\1\6\5\0\60\6\1\0\1\6"+
    "\3\0\2\6\2\0\5\6\2\0\1\6\1\0\1\6\30\0\3\6"+
    "\2\0\13\6\7\0\3\6\14\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\15\0\12\7\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\0\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\14\6\164\0\5\6\1\0\207\6"+
    "\23\0\12\7\7\0\32\6\6\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\2\4\1\3\1\5"+
    "\25\3\1\1\1\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\1\14\1\0\12\3\1\15\17\3\1\15\22\3"+
    "\1\15\1\3\1\15\101\3\1\0\1\16\102\3\1\17"+
    "\64\3\1\17\13\3\1\17\7\3\1\0\17\3\1\17"+
    "\25\3\1\17\36\3\1\17\1\3\2\17\1\3\2\17"+
    "\1\3\1\17\15\3\1\20\5\3\1\0\5\3\1\17"+
    "\1\3\2\17\5\3\2\17\1\3\2\17\36\3\1\21"+
    "\22\3\1\0\1\3\1\17\5\3\1\17\14\3\1\17"+
    "\10\3\1\0\17\3\1\22\15\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\70\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\70\0\70\0\70\0\70\0\u06c8\0\340\0\70"+
    "\0\70\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u0118"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u0700\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220"+
    "\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0"+
    "\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0"+
    "\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0"+
    "\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u0118"+
    "\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8"+
    "\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8"+
    "\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368"+
    "\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528"+
    "\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8"+
    "\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8"+
    "\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68"+
    "\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28"+
    "\0\u1068\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0"+
    "\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70"+
    "\0\u39c0\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8"+
    "\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8"+
    "\0\u42f0\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478"+
    "\0\u44b0\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638"+
    "\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8"+
    "\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8"+
    "\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78"+
    "\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38"+
    "\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8"+
    "\0\u4f30\0\u4f68\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8"+
    "\0\u50f0\0\u5128\0\u5160\0\u0118\0\u5198\0\u51d0\0\u5208\0\u5240"+
    "\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358\0\u5390\0\u53c8\0\u42f0"+
    "\0\u5400\0\u26b8\0\u5438\0\u5470\0\u54a8\0\u54e0\0\u5518\0\u5550"+
    "\0\u5588\0\u55c0\0\u55f8\0\u2840\0\u5630\0\u5668\0\u56a0\0\u56d8"+
    "\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828\0\u5860\0\u5898"+
    "\0\u58d0\0\u5908\0\u5940\0\u5978\0\u59b0\0\u59e8\0\u5a20\0\u5a58"+
    "\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8\0\u5be0\0\u5c18"+
    "\0\u5c50\0\u5c88\0\u5cc0\0\u0118\0\u5cf8\0\u5d30\0\u5d68\0\u5da0"+
    "\0\u5dd8\0\u5e10\0\u5e48\0\u5e80\0\u5eb8\0\u5ef0\0\u5f28\0\u5f60"+
    "\0\u5f98\0\u5fd0\0\u6008\0\u6040\0\u6078\0\u60b0\0\u60e8\0\u6120"+
    "\0\u6158\0\u6190\0\u61c8\0\u6200\0\u6238\0\u6270\0\u40c0\0\u62a8"+
    "\0\u62e0\0\u6318\0\u6350\0\u6388\0\u63c0\0\u63f8\0\u6430\0\u6468"+
    "\0\u64a0\0\u64d8\0\u6510\0\u6548\0\u6580\0\u65b8\0\u65f0\0\u6628"+
    "\0\u6660\0\u6698\0\u66d0\0\u6708\0\u6740\0\u6778\0\u67b0\0\u67e8"+
    "\0\u6820\0\u6858\0\u6890\0\u68c8\0\u6900\0\u6938\0\u6970\0\u69a8"+
    "\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\70\0\u6ac0\0\u6af8\0\u4de0"+
    "\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10\0\u6c48\0\u6c80\0\u6cb8"+
    "\0\u6cf0\0\u6d28";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\2"+
    "\1\7\1\10\1\11\1\7\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\7\1\34"+
    "\1\35\1\36\1\37\1\40\3\7\6\10\1\41\6\7"+
    "\1\42\1\43\1\44\1\45\71\0\1\3\1\0\1\3"+
    "\70\0\1\46\63\0\5\47\1\50\62\47\6\0\7\7"+
    "\1\51\37\7\1\0\6\7\15\0\2\10\34\0\6\10"+
    "\26\0\2\52\61\0\7\7\1\51\2\7\1\53\1\7"+
    "\1\54\1\55\2\7\1\56\3\7\1\57\1\60\1\7"+
    "\1\61\1\7\1\62\15\7\1\0\6\7\12\0\6\7"+
    "\1\63\1\51\1\64\1\65\1\66\1\67\1\7\1\70"+
    "\1\71\1\72\1\73\2\7\1\74\1\75\1\7\1\76"+
    "\1\77\1\100\1\7\1\101\6\7\1\102\5\7\1\0"+
    "\6\7\12\0\6\7\1\103\1\51\1\104\1\7\1\105"+
    "\1\106\1\7\1\107\1\7\1\110\4\7\1\111\1\112"+
    "\1\113\2\7\1\114\1\115\14\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\7\1\116\4\7\1\117\1\120\1\121"+
    "\1\122\2\7\1\123\1\124\5\7\1\125\1\126\12\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\127\1\130\1\131"+
    "\1\7\1\132\1\133\3\7\1\134\4\7\1\135\1\136"+
    "\1\137\1\140\1\7\1\141\1\7\1\142\11\7\1\0"+
    "\6\7\12\0\7\7\1\51\3\7\1\143\11\7\1\144"+
    "\1\7\1\145\1\146\16\7\1\0\6\7\12\0\7\7"+
    "\1\51\5\7\1\147\1\150\4\7\1\151\1\152\4\7"+
    "\1\153\15\7\1\0\6\7\12\0\7\7\1\51\5\7"+
    "\1\154\10\7\1\155\2\7\1\156\1\157\14\7\1\0"+
    "\6\7\12\0\7\7\1\51\1\127\4\7\1\160\7\7"+
    "\1\161\1\162\3\7\1\163\14\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\127\2\7\1\164\1\7\1\165\1\166"+
    "\6\7\1\167\3\7\1\170\15\7\1\0\6\7\12\0"+
    "\7\7\1\51\4\7\1\171\1\172\6\7\1\173\1\174"+
    "\21\7\1\0\6\7\12\0\7\7\1\51\1\7\1\175"+
    "\1\176\4\7\1\177\1\200\2\7\1\201\1\7\1\202"+
    "\3\7\1\117\3\7\1\177\1\7\1\203\7\7\1\0"+
    "\6\7\12\0\7\7\1\51\15\7\1\204\3\7\1\205"+
    "\15\7\1\0\6\7\12\0\7\7\1\51\2\7\1\206"+
    "\1\207\2\7\1\210\6\7\1\211\3\7\1\212\15\7"+
    "\1\0\6\7\12\0\7\7\1\51\14\7\1\213\1\7"+
    "\1\214\20\7\1\0\6\7\12\0\7\7\1\51\2\7"+
    "\1\215\10\7\1\216\23\7\1\0\6\7\12\0\7\7"+
    "\1\51\10\7\1\217\10\7\1\220\15\7\1\0\6\7"+
    "\12\0\7\7\1\51\7\7\1\221\3\7\1\222\23\7"+
    "\1\0\6\7\12\0\7\7\1\51\6\7\1\223\1\224"+
    "\3\7\1\225\1\226\22\7\1\0\6\7\12\0\7\7"+
    "\1\51\16\7\1\227\20\7\1\0\6\7\12\0\7\7"+
    "\1\51\1\7\1\230\17\7\1\231\4\7\1\232\10\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\1\233\26\7"+
    "\1\0\6\7\62\0\1\234\11\0\1\46\1\0\66\46"+
    "\10\0\3\235\3\0\1\235\1\0\1\235\1\0\3\235"+
    "\12\0\1\235\7\0\6\235\21\0\7\7\1\51\25\7"+
    "\1\236\11\7\1\0\6\7\12\0\7\7\1\51\21\7"+
    "\1\237\15\7\1\0\6\7\12\0\7\7\1\51\2\7"+
    "\1\240\1\7\1\241\1\7\1\242\30\7\1\0\6\7"+
    "\12\0\7\7\1\51\5\7\1\233\31\7\1\0\6\7"+
    "\12\0\7\7\1\51\21\7\1\243\15\7\1\0\6\7"+
    "\12\0\7\7\1\51\14\7\1\213\22\7\1\0\6\7"+
    "\12\0\7\7\1\51\21\7\1\77\15\7\1\0\6\7"+
    "\12\0\7\7\1\51\13\7\1\122\23\7\1\0\6\7"+
    "\12\0\7\7\1\51\2\7\1\244\1\245\1\7\1\246"+
    "\6\7\1\247\2\7\1\250\17\7\1\0\6\7\12\0"+
    "\7\7\1\51\14\7\1\251\22\7\1\0\6\7\12\0"+
    "\7\7\1\51\5\7\1\252\6\7\1\253\2\7\1\254"+
    "\17\7\1\0\6\7\12\0\7\7\1\51\7\7\1\255"+
    "\1\256\4\7\1\257\7\7\1\260\11\7\1\0\6\7"+
    "\12\0\7\7\1\51\2\7\1\261\2\7\1\262\10\7"+
    "\1\263\1\264\2\7\1\265\1\266\13\7\1\0\6\7"+
    "\12\0\7\7\1\51\4\7\1\260\1\7\1\267\30\7"+
    "\1\0\6\7\12\0\7\7\1\51\21\7\1\270\1\271"+
    "\14\7\1\0\6\7\12\0\7\7\1\51\15\7\1\272"+
    "\1\273\20\7\1\0\6\7\12\0\7\7\1\51\6\7"+
    "\1\274\30\7\1\0\6\7\12\0\7\7\1\51\15\7"+
    "\1\275\21\7\1\0\6\7\12\0\7\7\1\51\3\7"+
    "\1\276\7\7\1\277\23\7\1\0\6\7\12\0\7\7"+
    "\1\51\2\7\1\300\34\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\233\33\7\1\0\6\7\12\0\7\7"+
    "\1\51\10\7\1\301\26\7\1\0\6\7\12\0\7\7"+
    "\1\51\13\7\1\302\23\7\1\0\6\7\12\0\6\7"+
    "\1\303\1\51\37\7\1\0\6\7\12\0\7\7\1\51"+
    "\15\7\1\304\21\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\7\1\305\1\306\1\307\1\7\1\310\1\7\1\311"+
    "\3\7\1\312\1\313\14\7\1\314\5\7\1\0\6\7"+
    "\12\0\7\7\1\51\7\7\1\315\1\316\26\7\1\0"+
    "\6\7\12\0\7\7\1\51\5\7\1\317\2\7\1\320"+
    "\1\321\2\7\1\322\1\7\1\323\6\7\1\324\11\7"+
    "\1\0\6\7\12\0\7\7\1\51\2\7\1\325\3\7"+
    "\1\326\4\7\1\327\2\7\1\330\5\7\1\331\12\7"+
    "\1\0\6\7\12\0\7\7\1\51\5\7\1\332\7\7"+
    "\1\333\1\334\3\7\1\335\14\7\1\0\6\7\12\0"+
    "\7\7\1\51\21\7\1\336\15\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\7\1\337\12\7\1\340\22\7\1\0"+
    "\6\7\12\0\7\7\1\51\3\7\1\341\7\7\1\342"+
    "\23\7\1\0\6\7\12\0\6\7\1\343\1\51\37\7"+
    "\1\0\6\7\12\0\7\7\1\51\13\7\1\344\15\7"+
    "\1\345\5\7\1\0\6\7\12\0\7\7\1\51\16\7"+
    "\1\346\20\7\1\0\6\7\12\0\7\7\1\51\23\7"+
    "\1\340\13\7\1\0\6\7\12\0\7\7\1\51\1\7"+
    "\1\347\1\340\12\7\1\350\21\7\1\0\6\7\12\0"+
    "\7\7\1\51\2\7\1\340\3\7\1\340\10\7\1\260"+
    "\2\7\1\340\14\7\1\0\6\7\12\0\7\7\1\51"+
    "\6\7\1\340\30\7\1\0\6\7\12\0\7\7\1\51"+
    "\2\7\1\351\34\7\1\0\6\7\12\0\7\7\1\51"+
    "\7\7\1\352\27\7\1\0\6\7\12\0\7\7\1\51"+
    "\15\7\1\340\21\7\1\0\6\7\12\0\7\7\1\51"+
    "\17\7\1\353\17\7\1\0\6\7\12\0\7\7\1\51"+
    "\21\7\1\354\15\7\1\0\6\7\12\0\7\7\1\51"+
    "\5\7\1\355\31\7\1\0\6\7\12\0\7\7\1\51"+
    "\4\7\1\356\32\7\1\0\6\7\12\0\7\7\1\51"+
    "\10\7\1\356\3\7\1\356\10\7\1\357\11\7\1\0"+
    "\6\7\12\0\7\7\1\51\5\7\1\360\31\7\1\0"+
    "\6\7\12\0\7\7\1\51\4\7\1\361\32\7\1\0"+
    "\6\7\12\0\7\7\1\51\2\7\1\340\3\7\1\340"+
    "\1\362\5\7\1\355\4\7\1\340\14\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\363\33\7\1\0\6\7"+
    "\12\0\7\7\1\51\17\7\1\364\17\7\1\0\6\7"+
    "\12\0\7\7\1\51\14\7\1\365\22\7\1\0\6\7"+
    "\12\0\7\7\1\51\10\7\1\356\3\7\1\356\1\7"+
    "\1\366\20\7\1\0\6\7\12\0\7\7\1\51\1\367"+
    "\10\7\1\370\2\7\1\367\22\7\1\0\6\7\12\0"+
    "\7\7\1\51\16\7\1\371\20\7\1\0\6\7\12\0"+
    "\7\7\1\51\2\7\2\367\4\7\2\340\2\7\1\367"+
    "\6\7\1\340\13\7\1\0\6\7\12\0\7\7\1\51"+
    "\17\7\1\201\17\7\1\0\6\7\12\0\7\7\1\51"+
    "\3\7\1\340\1\7\3\340\27\7\1\0\6\7\12\0"+
    "\7\7\1\51\2\7\1\356\3\7\1\361\3\7\1\372"+
    "\24\7\1\0\6\7\12\0\7\7\1\51\6\7\1\373"+
    "\30\7\1\0\6\7\12\0\7\7\1\51\1\7\1\374"+
    "\35\7\1\0\6\7\12\0\7\7\1\51\3\7\1\375"+
    "\33\7\1\0\6\7\12\0\7\7\1\51\3\7\1\340"+
    "\1\7\1\340\31\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\7\1\376\35\7\1\0\6\7\12\0\7\7\1\51"+
    "\2\7\1\356\34\7\1\0\6\7\12\0\7\7\1\51"+
    "\24\7\1\361\12\7\1\0\6\7\12\0\6\7\1\377"+
    "\1\51\3\7\1\u0100\33\7\1\0\6\7\12\0\7\7"+
    "\1\51\6\7\1\201\15\7\1\u0101\12\7\1\0\6\7"+
    "\12\0\7\7\1\51\10\7\1\361\26\7\1\0\6\7"+
    "\12\0\7\7\1\51\13\7\1\377\23\7\1\0\6\7"+
    "\12\0\7\7\1\51\10\7\1\u0102\26\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\233\10\7\1\u0102\10\7"+
    "\1\357\11\7\1\0\6\7\12\0\7\7\1\51\7\7"+
    "\1\362\27\7\1\0\6\7\12\0\7\7\1\51\2\7"+
    "\1\u0103\3\7\1\355\4\7\1\u0104\1\7\1\u0105\21\7"+
    "\1\0\6\7\12\0\7\7\1\51\5\7\1\u0106\31\7"+
    "\1\0\6\7\12\0\7\7\1\51\22\7\1\u0107\14\7"+
    "\1\0\6\7\12\0\7\7\1\51\22\7\1\233\14\7"+
    "\1\0\6\7\12\0\7\7\1\51\5\7\1\u0108\1\7"+
    "\1\u0109\27\7\1\0\6\7\12\0\7\7\1\51\14\7"+
    "\1\122\22\7\1\0\6\7\12\0\7\7\1\51\2\7"+
    "\2\340\4\7\1\340\26\7\1\0\6\7\12\0\6\7"+
    "\1\u010a\1\51\2\7\2\340\33\7\1\0\6\7\12\0"+
    "\7\7\1\51\22\7\1\340\14\7\1\0\6\7\12\0"+
    "\7\7\1\51\3\7\1\340\13\7\1\340\1\7\1\340"+
    "\15\7\1\0\6\7\12\0\7\7\1\51\21\7\1\340"+
    "\15\7\1\0\6\7\12\0\7\7\1\51\2\7\2\340"+
    "\33\7\1\0\6\7\12\0\7\7\1\51\17\7\1\340"+
    "\1\7\1\340\15\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\u010b\1\u010c\1\7\1\u010d\13\7\1\356\17\7\1\0"+
    "\6\7\12\0\7\7\1\51\21\7\1\u010e\5\7\1\356"+
    "\7\7\1\0\6\7\12\0\7\7\1\51\1\7\1\u010f"+
    "\6\7\1\356\3\7\1\356\22\7\1\0\6\7\12\0"+
    "\7\7\1\51\7\7\1\340\13\7\1\u0110\13\7\1\0"+
    "\6\7\12\0\7\7\1\51\1\7\1\u0111\5\7\1\u0109"+
    "\7\7\1\u0112\17\7\1\0\6\7\12\0\7\7\1\51"+
    "\6\7\1\u0113\1\7\1\356\3\7\1\356\1\7\1\u0114"+
    "\20\7\1\0\6\7\12\0\7\7\1\51\1\7\1\u0115"+
    "\15\7\1\u0116\17\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\7\1\u0117\2\7\1\340\3\7\2\340\11\7\1\340"+
    "\13\7\1\0\6\7\12\0\7\7\1\51\17\7\1\u0118"+
    "\17\7\1\0\6\7\12\0\7\7\1\51\15\7\1\124"+
    "\21\7\1\0\6\7\12\0\7\7\1\51\1\7\1\u0119"+
    "\35\7\1\0\6\7\12\0\7\7\1\51\3\7\1\u011a"+
    "\33\7\1\0\6\7\12\0\6\7\1\u011b\1\51\3\7"+
    "\1\u011c\33\7\1\0\6\7\12\0\7\7\1\51\7\7"+
    "\1\260\27\7\1\0\6\7\12\0\7\7\1\51\17\7"+
    "\1\u011d\17\7\1\0\6\7\12\0\7\7\1\51\22\7"+
    "\1\u011e\14\7\1\0\6\7\12\0\7\7\1\51\16\7"+
    "\1\u011f\20\7\1\0\6\7\12\0\7\7\1\51\2\7"+
    "\1\356\1\u0120\1\340\3\7\2\340\5\7\1\u0121\4\7"+
    "\1\u0122\12\7\1\0\6\7\12\0\7\7\1\51\21\7"+
    "\1\u0123\15\7\1\0\6\7\12\0\7\7\1\51\5\7"+
    "\1\122\31\7\1\0\6\7\12\0\6\7\1\103\1\51"+
    "\2\7\1\u0124\1\7\1\u0125\1\62\1\7\1\u0126\7\7"+
    "\1\61\17\7\1\0\6\7\12\0\7\7\1\51\14\7"+
    "\1\u0127\22\7\1\0\6\7\12\0\7\7\1\51\21\7"+
    "\1\u0128\15\7\1\0\6\7\12\0\7\7\1\51\17\7"+
    "\1\340\17\7\1\0\6\7\63\0\1\u0129\16\0\7\7"+
    "\1\51\27\7\1\356\7\7\1\0\6\7\12\0\7\7"+
    "\1\51\27\7\1\u012a\7\7\1\0\6\7\12\0\7\7"+
    "\1\51\23\7\1\u012b\13\7\1\0\6\7\12\0\7\7"+
    "\1\51\15\7\1\266\21\7\1\0\6\7\12\0\7\7"+
    "\1\51\6\7\1\356\30\7\1\0\6\7\12\0\7\7"+
    "\1\51\10\7\1\u012c\26\7\1\0\6\7\12\0\7\7"+
    "\1\51\25\7\1\122\11\7\1\0\6\7\12\0\7\7"+
    "\1\51\5\7\1\u012d\31\7\1\0\6\7\12\0\7\7"+
    "\1\51\7\7\1\340\27\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\u012e\33\7\1\0\6\7\12\0\7\7"+
    "\1\51\14\7\1\u012f\22\7\1\0\6\7\12\0\7\7"+
    "\1\51\21\7\1\201\15\7\1\0\6\7\12\0\7\7"+
    "\1\51\17\7\1\254\17\7\1\0\6\7\12\0\7\7"+
    "\1\51\21\7\1\u0130\15\7\1\0\6\7\12\0\7\7"+
    "\1\51\5\7\1\u0131\31\7\1\0\6\7\12\0\7\7"+
    "\1\51\15\7\1\u0132\21\7\1\0\6\7\12\0\7\7"+
    "\1\51\21\7\1\u0133\15\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\340\3\7\1\u0134\27\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\340\33\7\1\0\6\7"+
    "\12\0\7\7\1\51\5\7\1\u0135\31\7\1\0\6\7"+
    "\12\0\7\7\1\51\24\7\1\201\12\7\1\0\6\7"+
    "\12\0\7\7\1\51\4\7\1\u0136\32\7\1\0\6\7"+
    "\12\0\7\7\1\51\2\7\2\u0137\15\7\1\u0138\15\7"+
    "\1\0\6\7\12\0\7\7\1\51\13\7\1\u0139\23\7"+
    "\1\0\6\7\12\0\7\7\1\51\14\7\1\233\22\7"+
    "\1\0\6\7\12\0\7\7\1\51\6\7\1\u013a\30\7"+
    "\1\0\6\7\12\0\7\7\1\51\2\7\1\u013b\34\7"+
    "\1\0\6\7\12\0\7\7\1\51\24\7\1\u0136\12\7"+
    "\1\0\6\7\12\0\7\7\1\51\24\7\1\u013c\12\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\1\u013a\26\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\177\1\u0137"+
    "\5\7\1\u013d\10\7\1\u0138\4\7\1\340\3\7\1\340"+
    "\4\7\1\0\6\7\12\0\7\7\1\51\1\7\1\340"+
    "\35\7\1\0\6\7\12\0\7\7\1\51\17\7\1\103"+
    "\17\7\1\0\6\7\12\0\7\7\1\51\6\7\1\u013e"+
    "\30\7\1\0\6\7\12\0\7\7\1\51\15\7\1\u013f"+
    "\21\7\1\0\6\7\12\0\7\7\1\51\31\7\1\u0140"+
    "\5\7\1\0\6\7\12\0\7\7\1\51\2\7\1\u013b"+
    "\17\7\1\233\14\7\1\0\6\7\12\0\7\7\1\51"+
    "\7\7\1\u0141\27\7\1\0\6\7\12\0\7\7\1\51"+
    "\14\7\1\340\22\7\1\0\6\7\12\0\7\7\1\51"+
    "\13\7\1\312\23\7\1\0\6\7\12\0\7\7\1\51"+
    "\7\7\1\u0142\27\7\1\0\6\7\12\0\7\7\1\51"+
    "\16\7\1\u0143\20\7\1\0\6\7\12\0\7\7\1\51"+
    "\2\7\1\u0144\3\7\1\122\30\7\1\0\6\7\12\0"+
    "\7\7\1\51\5\7\1\u0133\10\7\1\374\3\7\1\u0131"+
    "\14\7\1\0\6\7\12\0\7\7\1\51\5\7\1\u0145"+
    "\31\7\1\0\6\7\12\0\7\7\1\51\2\7\1\u0146"+
    "\1\u0147\33\7\1\0\6\7\12\0\7\7\1\51\22\7"+
    "\1\u0102\14\7\1\0\6\7\12\0\7\7\1\51\1\7"+
    "\1\u0148\35\7\1\0\6\7\12\0\7\7\1\51\7\7"+
    "\1\u0149\27\7\1\0\6\7\12\0\7\7\1\51\6\7"+
    "\1\u014a\30\7\1\0\6\7\12\0\7\7\1\51\10\7"+
    "\1\u014b\26\7\1\0\6\7\12\0\7\7\1\51\5\7"+
    "\1\152\31\7\1\0\6\7\12\0\7\7\1\51\5\7"+
    "\1\u0102\2\7\1\u014b\26\7\1\0\6\7\12\0\7\7"+
    "\1\51\4\7\1\u014c\32\7\1\0\6\7\12\0\7\7"+
    "\1\51\16\7\1\u014d\20\7\1\0\6\7\12\0\7\7"+
    "\1\51\30\7\1\u014e\6\7\1\0\6\7\12\0\7\7"+
    "\1\51\6\7\1\u014c\30\7\1\0\6\7\12\0\7\7"+
    "\1\51\6\7\1\u014f\30\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\201\33\7\1\0\6\7\12\0\7\7"+
    "\1\51\27\7\1\u0150\7\7\1\0\6\7\12\0\6\7"+
    "\1\u0151\1\51\6\7\1\u0152\30\7\1\0\6\7\12\0"+
    "\7\7\1\51\24\7\1\u0153\12\7\1\0\6\7\12\0"+
    "\7\7\1\51\10\7\1\u0154\26\7\1\0\6\7\12\0"+
    "\7\7\1\51\13\7\1\u0151\23\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\u0155\36\7\1\0\6\7\12\0\7\7"+
    "\1\51\1\367\4\7\1\u0102\2\7\2\340\11\7\1\340"+
    "\13\7\1\0\6\7\12\0\7\7\1\51\25\7\1\337"+
    "\11\7\1\0\6\7\12\0\7\7\1\51\1\7\1\u0156"+
    "\35\7\1\0\6\7\12\0\7\7\1\51\17\7\1\u0157"+
    "\17\7\1\0\6\7\12\0\7\7\1\51\3\7\1\u0158"+
    "\33\7\1\0\6\7\12\0\7\7\1\51\1\u0102\36\7"+
    "\1\0\6\7\12\0\7\7\1\51\22\7\1\122\14\7"+
    "\1\0\6\7\12\0\6\7\1\u0159\1\51\1\7\1\u0117"+
    "\1\7\1\u015a\1\340\3\7\2\340\11\7\1\340\13\7"+
    "\1\0\6\7\12\0\7\7\1\51\24\7\1\u015b\12\7"+
    "\1\0\6\7\12\0\7\7\1\51\36\7\1\u015c\1\0"+
    "\6\7\12\0\7\7\1\51\22\7\1\u015d\14\7\1\0"+
    "\6\7\12\0\7\7\1\51\1\7\1\u015e\1\7\1\u015f"+
    "\13\7\1\u0160\17\7\1\0\6\7\12\0\7\7\1\51"+
    "\13\7\1\u0161\23\7\1\0\6\7\12\0\7\7\1\51"+
    "\3\7\1\356\33\7\1\0\6\7\12\0\7\7\1\51"+
    "\4\7\1\340\3\7\2\340\11\7\1\340\13\7\1\0"+
    "\6\7\12\0\7\7\1\51\1\340\36\7\1\0\6\7"+
    "\12\0\7\7\1\51\1\7\1\u0162\35\7\1\0\6\7"+
    "\12\0\7\7\1\51\1\7\1\u0117\1\7\1\u0117\1\340"+
    "\3\7\2\340\11\7\1\340\13\7\1\0\6\7\12\0"+
    "\6\7\1\u0163\1\51\37\7\1\0\6\7\12\0\7\7"+
    "\1\51\2\7\1\u0164\11\7\1\u0165\22\7\1\0\6\7"+
    "\12\0\7\7\1\51\1\7\1\175\1\202\4\7\1\177"+
    "\1\200\2\7\1\201\1\7\1\202\3\7\1\117\3\7"+
    "\1\177\1\7\1\203\7\7\1\0\6\7\12\0\7\7"+
    "\1\51\17\7\1\377\17\7\1\0\6\7\12\0\7\7"+
    "\1\51\1\u0166\36\7\1\0\6\7\12\0\7\7\1\51"+
    "\10\7\2\340\11\7\1\340\13\7\1\0\6\7\12\0"+
    "\7\7\1\51\5\7\1\u0167\31\7\1\0\6\7\12\0"+
    "\7\7\1\51\13\7\1\u0168\23\7\1\0\6\7\12\0"+
    "\7\7\1\51\3\7\1\275\33\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\7\1\u0117\2\7\1\340\3\7\2\340"+
    "\1\7\1\u0166\7\7\1\340\13\7\1\0\6\7\12\0"+
    "\7\7\1\51\10\7\1\340\26\7\1\0\6\7\12\0"+
    "\7\7\1\51\6\7\1\u0169\12\7\1\u016a\1\u0111\5\7"+
    "\1\u016b\6\7\1\0\6\7\12\0\7\7\1\51\15\7"+
    "\1\u016c\21\7\1\0\6\7\12\0\7\7\1\51\1\7"+
    "\1\u0117\1\7\1\u0117\33\7\1\0\6\7\12\0\7\7"+
    "\1\51\30\7\1\u016d\6\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\u015a\1\u016e\1\u0166\1\7\1\u016f\1\u0170"+
    "\1\u0171\1\7\1\u0172\1\7\1\u0173\1\u0166\4\7\1\u0174"+
    "\1\7\1\u0175\11\7\1\0\6\7\12\0\7\7\1\51"+
    "\10\7\2\340\25\7\1\0\6\7\12\0\7\7\1\51"+
    "\30\7\1\340\6\7\1\0\6\7\12\0\7\7\1\51"+
    "\27\7\1\340\7\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\7\1\u0176\35\7\1\0\6\7\12\0\7\7\1\51"+
    "\10\7\2\340\11\7\1\340\1\u0177\12\7\1\0\6\7"+
    "\12\0\7\7\1\51\13\7\1\u0178\23\7\1\0\6\7"+
    "\12\0\7\7\1\51\1\7\1\u0179\35\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\304\33\7\1\0\6\7"+
    "\12\0\7\7\1\51\26\7\1\367\10\7\1\0\6\7"+
    "\12\0\7\7\1\51\14\7\1\u017a\22\7\1\0\6\7"+
    "\12\0\7\7\1\51\14\7\1\u017b\2\7\1\u017c\17\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\u017d\35\7"+
    "\1\0\6\7\12\0\7\7\1\51\6\7\1\u017e\30\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\260\1\7"+
    "\1\260\33\7\1\0\6\7\12\0\7\7\1\51\14\7"+
    "\1\u017f\22\7\1\0\6\7\12\0\7\7\1\51\7\7"+
    "\1\u0144\27\7\1\0\6\7\12\0\7\7\1\51\3\7"+
    "\1\u0144\33\7\1\0\6\7\12\0\7\7\1\51\5\7"+
    "\1\u0180\31\7\1\0\6\7\12\0\7\7\1\51\13\7"+
    "\1\u0181\23\7\1\0\6\7\12\0\7\7\1\51\13\7"+
    "\1\340\23\7\1\0\6\7\12\0\7\7\1\51\1\367"+
    "\36\7\1\0\6\7\12\0\7\7\1\51\3\7\1\340"+
    "\2\7\1\340\30\7\1\0\6\7\12\0\7\7\1\51"+
    "\3\7\1\u0120\1\340\3\7\2\340\25\7\1\0\6\7"+
    "\12\0\7\7\1\51\2\7\1\u0182\34\7\1\0\6\7"+
    "\12\0\7\7\1\51\4\7\1\u0183\32\7\1\0\6\7"+
    "\12\0\7\7\1\51\17\7\1\u0184\17\7\1\0\6\7"+
    "\12\0\7\7\1\51\17\7\1\356\17\7\1\0\6\7"+
    "\12\0\7\7\1\51\21\7\1\304\15\7\1\0\6\7"+
    "\12\0\7\7\1\51\24\7\1\356\12\7\1\0\6\7"+
    "\12\0\7\7\1\51\10\7\1\u0185\26\7\1\0\6\7"+
    "\12\0\7\7\1\51\4\7\1\340\3\7\2\340\25\7"+
    "\1\0\6\7\12\0\7\7\1\51\6\7\1\340\1\7"+
    "\1\u0186\26\7\1\0\6\7\12\0\7\7\1\51\17\7"+
    "\1\367\17\7\1\0\6\7\12\0\7\7\1\51\7\7"+
    "\1\u0187\27\7\1\0\6\7\12\0\7\7\1\51\14\7"+
    "\1\u0188\22\7\1\0\6\7\12\0\7\7\1\51\15\7"+
    "\1\333\21\7\1\0\6\7\12\0\7\7\1\51\11\7"+
    "\1\340\2\7\1\340\22\7\1\0\6\7\12\0\7\7"+
    "\1\51\14\7\1\u0189\22\7\1\0\6\7\64\0\1\u018a"+
    "\15\0\7\7\1\51\22\7\1\u0131\14\7\1\0\6\7"+
    "\12\0\7\7\1\51\16\7\1\u018b\20\7\1\0\6\7"+
    "\12\0\7\7\1\51\21\7\1\u018c\15\7\1\0\6\7"+
    "\12\0\7\7\1\51\24\7\1\u018d\12\7\1\0\6\7"+
    "\12\0\7\7\1\51\17\7\1\u018e\17\7\1\0\6\7"+
    "\12\0\7\7\1\51\5\7\1\u018f\31\7\1\0\6\7"+
    "\12\0\7\7\1\51\7\7\1\u0190\27\7\1\0\6\7"+
    "\12\0\7\7\1\51\24\7\1\u0191\12\7\1\0\6\7"+
    "\12\0\6\7\1\340\1\51\37\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\u0192\3\7\1\u0192\1\7\1\u0193\1\7"+
    "\2\u0192\10\7\1\u0192\14\7\1\0\6\7\12\0\7\7"+
    "\1\51\10\7\1\201\26\7\1\0\6\7\12\0\7\7"+
    "\1\51\1\340\5\7\1\u0192\1\7\2\340\2\7\1\u013a"+
    "\22\7\1\0\6\7\12\0\7\7\1\51\11\7\1\340"+
    "\25\7\1\0\6\7\12\0\7\7\1\51\13\7\1\u0194"+
    "\23\7\1\0\6\7\12\0\7\7\1\51\2\7\1\u0195"+
    "\34\7\1\0\6\7\12\0\7\7\1\51\1\340\5\7"+
    "\1\u0192\1\7\2\340\25\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\u0196\33\7\1\0\6\7\12\0\6\7"+
    "\1\u0192\1\51\1\u0192\3\7\1\u0192\1\7\1\u0192\1\7"+
    "\2\u0192\12\7\1\u0192\12\7\1\0\6\7\12\0\7\7"+
    "\1\51\13\7\1\u0197\13\7\1\u0197\1\7\1\203\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\22\7\1\u0198\14\7"+
    "\1\0\6\7\12\0\7\7\1\51\7\7\1\u0199\27\7"+
    "\1\0\6\7\12\0\6\7\1\u019a\1\51\37\7\1\0"+
    "\6\7\12\0\7\7\1\51\32\7\1\340\4\7\1\0"+
    "\6\7\12\0\7\7\1\51\1\7\1\u019b\35\7\1\0"+
    "\6\7\12\0\7\7\1\51\4\7\1\u019c\32\7\1\0"+
    "\6\7\12\0\7\7\1\51\2\7\1\340\34\7\1\0"+
    "\6\7\12\0\7\7\1\51\2\7\1\u0144\34\7\1\0"+
    "\6\7\12\0\7\7\1\51\1\7\1\u019d\35\7\1\0"+
    "\6\7\12\0\7\7\1\51\23\7\1\u019e\13\7\1\0"+
    "\6\7\12\0\7\7\1\51\21\7\1\u019f\5\7\1\u01a0"+
    "\7\7\1\0\6\7\12\0\7\7\1\51\16\7\1\u01a1"+
    "\20\7\1\0\6\7\12\0\7\7\1\51\4\7\1\u0137"+
    "\32\7\1\0\6\7\12\0\7\7\1\51\10\7\2\340"+
    "\3\7\1\340\5\7\1\340\13\7\1\0\6\7\12\0"+
    "\7\7\1\51\3\7\1\u0150\1\340\3\7\2\340\4\7"+
    "\1\u01a2\4\7\1\340\13\7\1\0\6\7\12\0\7\7"+
    "\1\51\1\u01a3\36\7\1\0\6\7\12\0\7\7\1\51"+
    "\3\7\1\u01a4\12\7\1\u01a5\20\7\1\0\6\7\12\0"+
    "\7\7\1\51\3\7\1\u0150\1\340\3\7\2\340\1\7"+
    "\1\340\2\7\1\u01a2\20\7\1\0\6\7\12\0\7\7"+
    "\1\51\4\7\1\340\4\7\1\340\25\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\u0137\12\7\1\u01a6\20\7"+
    "\1\0\6\7\12\0\7\7\1\51\6\7\1\u01a7\30\7"+
    "\1\0\6\7\12\0\7\7\1\51\7\7\1\u01a8\27\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\1\u0137\5\7"+
    "\1\u01a9\6\7\1\u01aa\11\7\1\0\6\7\12\0\7\7"+
    "\1\51\21\7\1\u01ab\15\7\1\0\6\7\12\0\7\7"+
    "\1\51\2\7\1\u01ac\34\7\1\0\6\7\12\0\7\7"+
    "\1\51\14\7\1\u0137\22\7\1\0\6\7\12\0\7\7"+
    "\1\51\14\7\1\u01ad\22\7\1\0\6\7\12\0\7\7"+
    "\1\51\2\7\1\u01ae\34\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\2\340\1\7\1\340\1\7\2\340\11\7"+
    "\1\340\13\7\1\0\6\7\12\0\7\7\1\51\10\7"+
    "\2\364\11\7\1\364\13\7\1\0\6\7\12\0\7\7"+
    "\1\51\31\7\1\u01af\5\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\u0117\33\7\1\0\6\7\12\0\7\7"+
    "\1\51\3\7\1\u01b0\2\7\1\u01b1\1\7\1\u01b2\26\7"+
    "\1\0\6\7\12\0\7\7\1\51\3\7\1\u01b3\2\7"+
    "\1\u01b4\1\7\1\u01b5\12\7\1\u01b5\13\7\1\0\6\7"+
    "\12\0\7\7\1\51\1\7\1\u01b6\1\7\1\u01b7\33\7"+
    "\1\0\6\7\12\0\7\7\1\51\2\7\1\201\34\7"+
    "\1\0\6\7\12\0\7\7\1\51\27\7\1\260\7\7"+
    "\1\0\6\7\12\0\7\7\1\51\2\7\1\u0109\34\7"+
    "\1\0\6\7\12\0\7\7\1\51\5\7\1\u01b8\31\7"+
    "\1\0\6\7\12\0\7\7\1\51\21\7\1\233\15\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\u0117\35\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\u01b9\35\7"+
    "\1\0\6\7\12\0\7\7\1\51\6\7\1\u0102\30\7"+
    "\1\0\6\7\12\0\7\7\1\51\21\7\1\u01ba\15\7"+
    "\1\0\6\7\12\0\7\7\1\51\13\7\1\u01ba\23\7"+
    "\1\0\6\7\12\0\7\7\1\51\21\7\1\u01bb\15\7"+
    "\1\0\6\7\12\0\7\7\1\51\30\7\1\u01bc\6\7"+
    "\1\0\6\7\12\0\7\7\1\51\7\7\1\u01bd\27\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\2\u01be\11\7"+
    "\1\u01be\13\7\1\0\6\7\12\0\7\7\1\51\3\7"+
    "\1\u01bf\33\7\1\0\6\7\12\0\7\7\1\51\1\7"+
    "\1\u0117\21\7\1\u01be\1\7\1\u01c0\11\7\1\0\6\7"+
    "\12\0\7\7\1\51\10\7\1\u01be\12\7\1\u01be\13\7"+
    "\1\0\6\7\12\0\7\7\1\51\17\7\1\u01c1\17\7"+
    "\1\0\6\7\12\0\7\7\1\51\16\7\1\340\20\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\1\340\4\7"+
    "\1\u01c2\21\7\1\0\6\7\12\0\7\7\1\51\1\7"+
    "\1\u0117\4\7\1\u01c3\1\7\1\u01c0\26\7\1\0\6\7"+
    "\12\0\7\7\1\51\13\7\1\201\5\7\1\117\15\7"+
    "\1\0\6\7\12\0\7\7\1\51\21\7\1\367\15\7"+
    "\1\0\6\7\12\0\7\7\1\51\24\7\1\122\12\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\u01c4\35\7"+
    "\1\0\6\7\12\0\7\7\1\51\5\7\1\u01c5\31\7"+
    "\1\0\6\7\12\0\7\7\1\51\15\7\1\u01c6\21\7"+
    "\1\0\6\7\12\0\7\7\1\51\14\7\1\u01bc\22\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\1\u01c7\26\7"+
    "\1\0\6\7\12\0\7\7\1\51\2\7\1\u01c8\34\7"+
    "\1\0\6\7\12\0\7\7\1\51\17\7\1\u010f\17\7"+
    "\1\0\6\7\12\0\7\7\1\51\17\7\1\u01c9\17\7"+
    "\1\0\6\7\12\0\7\7\1\51\6\7\1\377\30\7"+
    "\1\0\6\7\12\0\7\7\1\51\30\7\1\u01ca\6\7"+
    "\1\0\6\7\12\0\7\7\1\51\3\7\1\u01cb\33\7"+
    "\1\0\6\7\12\0\7\7\1\51\4\7\1\340\3\7"+
    "\2\340\11\7\1\340\12\7\1\117\1\0\6\7\12\0"+
    "\7\7\1\51\1\7\1\u0104\35\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\7\1\u01cc\35\7\1\0\6\7\12\0"+
    "\7\7\1\51\15\7\1\u01cd\21\7\1\0\6\7\12\0"+
    "\7\7\1\51\15\7\1\u01ce\21\7\1\0\6\7\65\0"+
    "\1\u01cf\14\0\7\7\1\51\22\7\1\u01d0\14\7\1\0"+
    "\6\7\12\0\7\7\1\51\5\7\1\330\31\7\1\0"+
    "\6\7\12\0\7\7\1\51\21\7\1\u01d1\15\7\1\0"+
    "\6\7\12\0\7\7\1\51\15\7\1\u01d2\21\7\1\0"+
    "\6\7\12\0\7\7\1\51\2\7\1\233\34\7\1\0"+
    "\6\7\12\0\7\7\1\51\2\7\1\202\5\7\1\260"+
    "\2\7\1\u01d3\2\7\1\u0131\2\7\1\117\3\7\1\177"+
    "\11\7\1\0\6\7\12\0\7\7\1\51\1\7\1\u0192"+
    "\35\7\1\0\6\7\12\0\7\7\1\51\24\7\1\340"+
    "\12\7\1\0\6\7\12\0\7\7\1\51\15\7\1\260"+
    "\21\7\1\0\6\7\12\0\7\7\1\51\17\7\1\275"+
    "\17\7\1\0\6\7\12\0\7\7\1\51\31\7\1\340"+
    "\5\7\1\0\6\7\12\0\7\7\1\51\13\7\1\233"+
    "\23\7\1\0\6\7\12\0\7\7\1\51\1\7\1\u0192"+
    "\20\7\1\u0192\14\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\7\1\u0141\35\7\1\0\6\7\12\0\7\7\1\51"+
    "\21\7\1\117\5\7\1\203\7\7\1\0\6\7\12\0"+
    "\7\7\1\51\22\7\1\u01d4\14\7\1\0\6\7\12\0"+
    "\7\7\1\51\14\7\1\233\5\7\1\u01d5\14\7\1\0"+
    "\6\7\12\0\7\7\1\51\23\7\1\u0120\13\7\1\0"+
    "\6\7\12\0\7\7\1\51\17\7\1\u0120\17\7\1\0"+
    "\6\7\12\0\7\7\1\51\10\7\1\u01d6\26\7\1\0"+
    "\6\7\12\0\7\7\1\51\3\7\1\u0150\33\7\1\0"+
    "\6\7\12\0\7\7\1\51\4\7\1\340\1\7\1\340"+
    "\1\7\1\u01d7\1\340\13\7\1\u0137\11\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\u01d8\33\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\u01d9\33\7\1\0\6\7"+
    "\12\0\7\7\1\51\4\7\1\340\32\7\1\0\6\7"+
    "\12\0\7\7\1\51\11\7\1\374\25\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\u01da\33\7\1\0\6\7"+
    "\12\0\7\7\1\51\10\7\1\117\26\7\1\0\6\7"+
    "\12\0\7\7\1\51\11\7\1\340\2\7\1\u0137\1\7"+
    "\1\u0137\20\7\1\0\6\7\12\0\7\7\1\51\17\7"+
    "\1\u01db\17\7\1\0\6\7\12\0\7\7\1\51\30\7"+
    "\1\u01dc\6\7\1\0\6\7\12\0\7\7\1\51\6\7"+
    "\1\340\2\7\1\340\11\7\1\340\13\7\1\0\6\7"+
    "\12\0\7\7\1\51\25\7\1\u01dd\11\7\1\0\6\7"+
    "\12\0\7\7\1\51\4\7\1\340\16\7\1\340\13\7"+
    "\1\0\6\7\12\0\7\7\1\51\31\7\1\u01de\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\31\7\1\u01df\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\31\7\1\u0166\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\31\7\1\u01e0\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\31\7\1\u01e1\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\31\7\1\u015d\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\3\7\1\u01e2\2\7"+
    "\1\u01e2\30\7\1\0\6\7\12\0\7\7\1\51\3\7"+
    "\1\u01e3\2\7\1\u01e3\30\7\1\0\6\7\12\0\7\7"+
    "\1\51\10\7\1\374\26\7\1\0\6\7\12\0\7\7"+
    "\1\51\10\7\1\340\12\7\1\340\13\7\1\0\6\7"+
    "\12\0\7\7\1\51\2\7\1\u01e4\34\7\1\0\6\7"+
    "\12\0\7\7\1\51\20\7\1\u01e5\16\7\1\0\6\7"+
    "\12\0\7\7\1\51\15\7\1\u01e6\21\7\1\0\6\7"+
    "\12\0\7\7\1\51\3\7\1\u0133\22\7\1\u0133\10\7"+
    "\1\0\6\7\12\0\7\7\1\51\30\7\1\u0166\6\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\260\35\7"+
    "\1\0\6\7\12\0\7\7\1\51\1\7\1\u0117\13\7"+
    "\1\340\4\7\1\u01b9\1\340\1\7\1\122\11\7\1\0"+
    "\6\7\12\0\7\7\1\51\26\7\1\u0133\10\7\1\0"+
    "\6\7\12\0\7\7\1\51\5\7\1\340\10\7\1\340"+
    "\20\7\1\0\6\7\12\0\7\7\1\51\21\7\1\u017c"+
    "\15\7\1\0\6\7\12\0\7\7\1\51\7\7\1\u01e7"+
    "\27\7\1\0\6\7\12\0\7\7\1\51\1\u01bc\36\7"+
    "\1\0\6\7\12\0\7\7\1\51\22\7\1\u01e8\14\7"+
    "\1\0\6\7\12\0\7\7\1\51\17\7\1\u01e9\17\7"+
    "\1\0\6\7\12\0\7\7\1\51\5\7\1\u01bc\31\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\1\u0166\14\7"+
    "\1\u0166\11\7\1\0\6\7\12\0\7\7\1\51\3\7"+
    "\1\u01bc\33\7\1\0\6\7\12\0\7\7\1\51\21\7"+
    "\1\u01ea\15\7\1\0\6\7\12\0\7\7\1\51\5\7"+
    "\1\u01eb\31\7\1\0\6\7\12\0\7\7\1\51\16\7"+
    "\1\u01ec\20\7\1\0\6\7\66\0\1\u01ed\13\0\7\7"+
    "\1\51\14\7\1\201\22\7\1\0\6\7\12\0\7\7"+
    "\1\51\34\7\1\u01ee\2\7\1\0\6\7\12\0\7\7"+
    "\1\51\14\7\1\u01d1\22\7\1\0\6\7\12\0\7\7"+
    "\1\51\16\7\1\340\2\7\1\340\15\7\1\0\6\7"+
    "\12\0\7\7\1\51\17\7\1\u0141\11\7\1\233\5\7"+
    "\1\0\6\7\12\0\7\7\1\51\17\7\1\u0141\17\7"+
    "\1\0\6\7\12\0\7\7\1\51\23\7\1\u01ef\13\7"+
    "\1\0\6\7\12\0\7\7\1\51\10\7\1\u0137\1\u01a6"+
    "\25\7\1\0\6\7\12\0\7\7\1\51\11\7\1\u01a6"+
    "\25\7\1\0\6\7\12\0\7\7\1\51\30\7\1\u01a6"+
    "\6\7\1\0\6\7\12\0\7\7\1\51\2\7\1\u01f0"+
    "\34\7\1\0\6\7\12\0\7\7\1\51\10\7\1\u01f1"+
    "\14\7\1\u01f1\11\7\1\0\6\7\12\0\7\7\1\51"+
    "\27\7\1\u01f2\7\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\7\1\u01f3\35\7\1\0\6\7\12\0\7\7\1\51"+
    "\1\7\1\u01f4\35\7\1\0\6\7\12\0\7\7\1\51"+
    "\3\7\1\u01f5\33\7\1\0\6\7\12\0\7\7\1\51"+
    "\3\7\1\u01f6\33\7\1\0\6\7\12\0\7\7\1\51"+
    "\31\7\1\152\5\7\1\0\6\7\12\0\7\7\1\51"+
    "\31\7\1\u01f7\5\7\1\0\6\7\12\0\7\7\1\51"+
    "\10\7\1\u01f8\26\7\1\0\6\7\12\0\7\7\1\51"+
    "\27\7\1\u01f9\7\7\1\0\6\7\12\0\7\7\1\51"+
    "\24\7\1\u01fa\12\7\1\0\6\7\12\0\7\7\1\51"+
    "\21\7\1\u01bc\15\7\1\0\6\7\12\0\7\7\1\51"+
    "\17\7\1\u01bc\17\7\1\0\6\7\12\0\6\7\1\u01e8"+
    "\1\51\37\7\1\0\6\7\12\0\7\7\1\51\23\7"+
    "\1\u01a6\13\7\1\0\6\7\12\0\7\7\1\51\6\7"+
    "\1\u01fb\30\7\1\0\6\7\12\0\7\7\1\51\1\7"+
    "\1\u01fc\35\7\1\0\6\7\67\0\1\u01fd\12\0\7\7"+
    "\1\51\35\7\1\340\1\7\1\0\6\7\12\0\7\7"+
    "\1\51\6\7\1\117\30\7\1\0\6\7\12\0\7\7"+
    "\1\51\25\7\1\u01fe\11\7\1\0\6\7\12\0\7\7"+
    "\1\51\4\7\1\u0137\3\7\1\117\1\374\11\7\1\u01ef"+
    "\13\7\1\0\6\7\12\0\7\7\1\51\4\7\1\340"+
    "\3\7\2\340\11\7\1\340\7\7\1\u01a6\3\7\1\0"+
    "\6\7\12\0\7\7\1\51\6\7\1\340\1\7\1\340"+
    "\26\7\1\0\6\7\12\0\7\7\1\51\3\7\1\340"+
    "\4\7\1\340\26\7\1\0\6\7\12\0\7\7\1\51"+
    "\6\7\1\340\1\7\1\340\12\7\1\340\13\7\1\0"+
    "\6\7\12\0\7\7\1\51\3\7\1\340\4\7\1\340"+
    "\12\7\1\340\13\7\1\0\6\7\12\0\7\7\1\51"+
    "\3\7\1\u01b9\33\7\1\0\6\7\12\0\7\7\1\51"+
    "\5\7\1\77\31\7\1\0\6\7\12\0\7\7\1\51"+
    "\21\7\1\u01ff\15\7\1\0\6\7\12\0\7\7\1\51"+
    "\15\7\1\u0200\5\7\1\340\13\7\1\0\6\7\12\0"+
    "\7\7\1\51\2\7\1\u0201\34\7\1\0\6\7\12\0"+
    "\7\7\1\51\1\7\1\u011d\35\7\1\0\6\7\12\0"+
    "\7\7\1\51\13\7\1\u0202\3\7\1\u0203\17\7\1\0"+
    "\6\7\12\0\7\7\1\51\13\7\1\u0204\23\7\1\0"+
    "\6\7\12\0\7\7\1\51\5\7\1\u0205\31\7\1\0"+
    "\6\7\12\0\7\7\1\51\17\7\1\u0206\17\7\1\0"+
    "\6\7\12\0\4\7\1\340\2\7\1\51\31\7\2\340"+
    "\4\7\1\0\6\7\12\0\7\7\1\51\5\7\1\u0207"+
    "\31\7\1\0\6\7\12\0\7\7\1\51\3\7\1\u0208"+
    "\33\7\1\0\6\7\12\0\7\7\1\51\5\7\1\340"+
    "\31\7\1\0\6\7\12\0\7\7\1\51\3\7\1\u0209"+
    "\33\7\1\0\6\7\12\0\7\7\1\51\17\7\1\u01a6"+
    "\17\7\1\0\6\7\12\0\7\7\1\51\3\7\1\u020a"+
    "\33\7\1\0\6\7\12\0\7\7\1\51\22\7\1\77"+
    "\14\7\1\0\6\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\26\1\4\11"+
    "\1\1\1\0\2\11\1\0\161\1\1\0\214\1\1\0"+
    "\140\1\1\0\104\1\1\0\35\1\1\0\17\1\1\11"+
    "\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  AsmIntelLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AsmIntelLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1734) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return FLAG;
          }
        case 19: break;
        case 8: 
          { return COMMA;
          }
        case 20: break;
        case 4: 
          { return INT;
          }
        case 21: break;
        case 10: 
          { return LINE_COMMENT;
          }
        case 22: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 23: break;
        case 12: 
          { return LABEL;
          }
        case 24: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 25: break;
        case 14: 
          { return HEX;
          }
        case 26: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 27: break;
        case 5: 
          { return COLON;
          }
        case 28: break;
        case 6: 
          { return LPAREN;
          }
        case 29: break;
        case 7: 
          { return RPAREN;
          }
        case 30: break;
        case 16: 
          { return TEXT;
          }
        case 31: break;
        case 11: 
          { return STRING;
          }
        case 32: break;
        case 9: 
          { return BIT_OR;
          }
        case 33: break;
        case 18: 
          { return IMPORT;
          }
        case 34: break;
        case 15: 
          { return INSTRUCTION;
          }
        case 35: break;
        case 13: 
          { return PSEUDO_REG;
          }
        case 36: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
